use ir::*;

grammar;

pub Input: Input = {
    Comment* <placeholders:Placeholders> <known_subsets:KnownSubsets?> <use_of_var_derefs_origin:VarUsesRegion?> <drop_of_var_derefs_origin:VarDropsRegion?> Comment* <blocks:BlockDefn*> => Input::new(<>)
};

Comment: () = {
    r"//.*"
};

VarRegionMappings = Comma<VarRegionMapping>;
VarRegionMapping: (String, String) = {
                 "(" <Variable> "," <Origin> ")" => (<>),
};

VarUsesRegion = "use_of_var_derefs_origin" "{" <VarRegionMappings> "}";
VarDropsRegion = "drop_of_var_derefs_origin" "{" <VarRegionMappings> "}";

Placeholders = "placeholders" "{" <Comma<Origin>> "}";

KnownSubsets = "known_subsets" "{" <Comma<KnownSubset>> "}";
KnownSubset : KnownSubset = {
    <a:Origin> ":" <b:Origin> => KnownSubset { <> },
};

BlockDefn : Block = {
    "block" <name:Block> "{" <statements:Statement*> Comment* <goto:Goto> "}" => Block { <> },
};

Goto: Vec<String> = {
    "goto" <Comma<Block>> ";",
    () => Vec::new(),
};

Statement : Statement = {
    Comment* <Effects> ";" => Statement::new(<>),
    Comment* <effects_start:Effects> "/" <effects:Effects> ";" => Statement { <> },
};

Effects = Comma<Effect>;
Effect = {
    <Fact> => Effect::Fact(<>),
    Use
};

Fact : Fact = {
  "outlives" "(" <a:Origin> ":" <b:Origin> ")" => Fact::Outlives { <> },
  "loan_issued_at" "(" <origin:Origin> "," <loan:Loan> ")" => Fact::LoanIssuedAt { <> },
  "loan_invalidated_at" "(" <loan:Loan> ")" => Fact::LoanInvalidatedAt { <> },
  "loan_killed_at" "(" <loan:Loan> ")" => Fact::LoanKilledAt { <> },
  "var_used_at" "(" <variable:Variable> ")" => Fact::UseVariable { <> },
  "var_defined_at" "(" <variable:Variable> ")" => Fact::DefineVariable { <> },
  "origin_live_on_entry" "(" <origin:Origin> ")" => Fact::OriginLiveOnEntry { <> },
  "var_dropped_at" "(" <variable:Variable> ")" => Fact::UseVariable { <> },
};

Use : Effect = "use" "(" <origins:Comma<Origin>> ")" => Effect::Use { <> };

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

Origin: String = {
    r"'\w+" => <>.to_string()
};

Block: String = {
    r"B\w+" => <>.to_string()
};

Loan: String = {
    r"L\w+" => <>.to_string()
};

Variable: String = {
    r"V\w+" => <>.to_string()
};

